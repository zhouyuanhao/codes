package com.res.blog;

import java.lang.reflect.Method;

import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;

public class CGlibEnhance implements MethodInterceptor{
	public static void main(String[] args) {
		CGlibEnhance ce = new CGlibEnhance();
		Dummy dummy = (Dummy) ce.getProxy(Dummy.class);
		dummy.fun1();
		System.out.println("----");
		dummy.fun2();
	}
	
	public Object getProxy(Class<Dummy> clazz) {
	    Enhancer enhancer = new Enhancer();  
		enhancer.setSuperclass(clazz);
		enhancer.setCallback(this);
		return enhancer.create();
	}
	
	@Override
	public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
		System.out.println("pre-"+method.getName());  
        Object result = proxy.invokeSuper(obj,args);  
        System.out.println("post-"+method.getName());  
        return result;  
	}
}
----------------------------
package com.res.blog;

public class Dummy implements DummyInterface {

	public Dummy(){
	}
	public void fun1(){
		System.out.println("fun1 start");
		fun2();
		System.out.println("fun1 end");
	}

	public void fun2() {
		System.out.println("-fun2 start");
		System.out.println("-fun2 end");
	}
}
--------------------------------
package com.res.blog;

public interface DummyInterface {

	void fun2();

	void fun1();

}
----------------------
package com.res.blog;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class JavaProxy implements InvocationHandler {
	private Object target;

	public JavaProxy(Object target) {
		super();
		this.target = target;
	}

	public static void main(String[] args) {
		JavaProxy handler = new JavaProxy(new Dummy());

		DummyInterface proxy = (DummyInterface) handler.getProxy();
		proxy.fun1();
		System.out.println("----");
		proxy.fun2();
	}

	@Override
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		Object result = null;
		System.out.println("pre-" + method.getName());
		result = method.invoke(target, args);
		System.out.println("post-" + method.getName());

		return result;
	}

	public Object getProxy() {
		return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), target.getClass().getInterfaces(), this);
	}
}
---cglib-------
pre-fun1
fun1 start
pre-fun2
-fun2 start
-fun2 end
post-fun2
fun1 end
post-fun1
----
pre-fun2
-fun2 start
-fun2 end
post-fun2
-----jdk------
pre-fun1
fun1 start
-fun2 start
-fun2 end
fun1 end
post-fun1
----
pre-fun2
-fun2 start
-fun2 end
post-fun2
